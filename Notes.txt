//To compile .o files
gcc -c Dll_util.c -o Dll_util.o

//To Create static library
ar rs lib<some_name>.a <file>.o
ar rs libdll.a Dll.o Dll_util.o

//To create Dynamic library
gcc -c -fPIC Dll_util.c -o Dll_util.o
gcc Dll.o Dll_util.o -shared -o libdll.so

PIC - Position independent code Flag

//Linking static library
//To use library use .h file and compile the application
gcc -c appl.c -o appl.o
gcc appl.o -o exe -L . -ldll
"gcc <appl_name>.o -o <executable> -L <path_of_static_lib> -l<lib_name>"


//Linking dynamic library
//Place libdll.so in /usr/lib/ and run command "sudo ldconfig"
//Compile like below
"gcc appl.o -o exe  -ldll"
//run the executable

/*Below is the commands to know what happens during 4 stages of compilation*/
//PreProcessing
"gcc -E test.c -o test_preProc.c" //Here we will see all the commands after '#' will be run


//Compilation Stage
//Assembly code will be generated
"gcc -S test_preProc.c -o test.s"

//Assembler Stage
//Assembly code is converted into object code
"gcc -c test.s -o test.o"
//Above object file is not readable
"objDump -D test.o > TestDump.txt"


//Linking Stage
//All external libraries if any will be linked here
